# -*- coding: utf-8 -*-
"""IBM_model_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hwdFpBosa2TqFAZlJlMEYWXKO2ODa5dX
"""

from collections import defaultdict

from google.colab import drive
drive.mount('/content/drive')

file1 = open('./drive/My Drive/Colab Notebooks/train.en','r')
file2 = open('./drive/My Drive/Colab Notebooks/train.hi','r')
all_e = file1.read().split('\n')
all_f = file2.read().split('\n')

def translation_prob():
# initialize t(e|f) uniformly    
    t = defaultdict(lambda:0.1)
    for converge in range(10):
        
        # initalize
        count=defaultdict(int)
        total=defaultdict(int)
        s_total=defaultdict(int)
        for i in range(len(all_f)):
            # compute normalization
            for words_e in all_e[i].split(' '):
                s_total[words_e] = 0
                for words_f in all_f[i].split(' '):
                    s_total[words_e] += t[(words_e,words_f)]
            # collect counts
            for words_e in all_e[i].split(' '):
                for words_f in all_f[i].split(' '):
                    count[(words_e,words_f)] += (t[(words_e,words_f)]/s_total[words_e])
                    total[words_f] += (t[(words_e,words_f)]/s_total[words_e])
        # esitmate probabilities
        for i in range(len(all_f)):
            for words_e in all_e[i].split(' '):
                for words_f in all_f[i].split(' '):
                    t[(words_e,words_f)] = (count[(words_e,words_f)]/total[words_f])
    return t

t = translation_prob()
defa = t.default_factory()
keys = [i for i in t if t[i]!=defa]

import pickle
print(type(t))
with open('t_out.pickle', 'wb') as handle:
    pickle.dump(dict(t), handle, protocol=pickle.HIGHEST_PROTOCOL)

words = []
for key in t.keys():
  if key[0] not in words:
    words.append(key[0])
results = {}
for word in words:
  max_val = -1
  max_key = ''
  for key in t.keys():
    if(key[0]==word) and max_val < t[key]:
      max_val = t[key]
      max_key = key
  results[max_key] = max_val

print(results)

